name: DevSecOps Local App Scanner

on:
  workflow_dispatch:

jobs:
  local-security-scan:
    runs-on: self-hosted

    steps:
    - name: Ejecutar análisis de seguridad local
      env:
        GH_TOKEN: ${{ secrets.REPORTES_TOKEN }}  # Token personal con permiso repo
      run: |
        # Directorios base de entrada (apps) y salida (reportes)
        BASE_DIR="/opt/apps-a-revisar"
        REPORT_DIR="/opt/devsecops-reportes"
        mkdir -p "$REPORT_DIR"

        # Limpieza de reportes anteriores
        rm -rf "$REPORT_DIR"/*

        # Descargar el template oficial HTML de Trivy
        mkdir -p /tmp/templates
        wget -q -O /tmp/templates/report.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

        # Recorre cada carpeta de aplicación
        for APP in "$BASE_DIR"/*; do
          [ -d "$APP" ] || continue
          APP_NAME=$(basename "$APP")
          APP_REPORT="$REPORT_DIR/$APP_NAME"
          mkdir -p "$APP_REPORT"
          cd "$APP" || continue

          # Analizar Python si existe requirements.txt
          if [ -f "requirements.txt" ]; then
            [ -d "venv" ] || python3 -m venv venv
            source venv/bin/activate
            pip install --quiet -r requirements.txt || true
            deactivate
            gh codeql database create "$APP_REPORT/codeql-python-db" --language=python --source-root=. || true
          fi

          # Analizar Node.js si existe package.json
          if [ -f "package.json" ]; then
            [ -d "node_modules" ] || npm install --silent || true
            gh codeql database create "$APP_REPORT/codeql-node-db" --language=javascript --source-root=. || true
          fi

          # Analizar Java si existe pom.xml
          if [ -f "pom.xml" ]; then
            mvn install -DskipTests -q || true
            gh codeql database create "$APP_REPORT/codeql-java-db" --language=java --source-root=. || true
          fi

          # Ejecutar Trivy y generar reporte en HTML
          trivy fs . \
            --format template \
            --template "@/tmp/templates/report.tpl" \
            --output "$APP_REPORT/trivy-report.html" || true

          # Clonar repositorio de GitHub Pages con los reportes
          cd /tmp
          rm -rf reportes_seguridad
          git clone https://x-access-token:${GH_TOKEN}@github.com/marco8961/reportes_seguridad.git
          cd reportes_seguridad

          # Copiar el HTML dentro de la carpeta de la app
          mkdir -p "$APP_NAME"
          cp "$APP_REPORT/trivy-report.html" "$APP_NAME/"

          # Subir cambios al repositorio (GitHub Pages)
          git config user.name "github-actions"
          git config user.email "ci@github.com"
          git add .
          git commit -m "Nuevo reporte de seguridad para $APP_NAME" || echo "Sin cambios que subir"
          git push

          # Imprimir URL del reporte
          echo "Reporte disponible en: https://marco8961.github.io/reportes_seguridad/$APP_NAME/trivy-report.html"
        done

        # Mostrar ruta local como respaldo
        echo "Reportes locales disponibles en: $REPORT_DIR"
