name: DevSecOps Local App Scanner

on:
  workflow_dispatch:

jobs:
  local-security-scan:
    runs-on: self-hosted

    steps:
    - name: üß™ Ejecutar an√°lisis de seguridad local
      run: |
        BASE_DIR="/opt/apps-a-revisar"
        REPORT_DIR="/opt/devsecops-reportes"
        mkdir -p "$REPORT_DIR"

        echo "üßπ Limpiando reportes anteriores..."
        rm -rf "$REPORT_DIR"/*

        for APP in "$BASE_DIR"/*; do
          [ -d "$APP" ] || continue
          APP_NAME=$(basename "$APP")
          APP_REPORT="$REPORT_DIR/$APP_NAME"
          mkdir -p "$APP_REPORT"

          echo "üöÄ Analizando: $APP_NAME"
          cd "$APP" || continue

          if [ -f "requirements.txt" ]; then
            echo "üîç Python detectado"
            [ -d "venv" ] || python3 -m venv venv
            source venv/bin/activate
            pip install --quiet -r requirements.txt || true
            deactivate
            gh codeql database create "$APP_REPORT/codeql-python-db" --language=python --source-root=. || true
          fi

          if [ -f "package.json" ]; then
            echo "üîç Node.js detectado"
            [ -d "node_modules" ] || npm install --silent || true
            gh codeql database create "$APP_REPORT/codeql-node-db" --language=javascript --source-root=. || true
          fi

          if [ -f "pom.xml" ]; then
            echo "üîç Java detectado"
            mvn install -DskipTests -q || true
            gh codeql database create "$APP_REPORT/codeql-java-db" --language=java --source-root=. || true
          fi

          echo "üîí Ejecutando Trivy..."
          trivy fs . --format json --output "$APP_REPORT/trivy-report.json" || true

          echo "‚úÖ An√°lisis finalizado para $APP_NAME"
          echo "--------------------------------------"
        done

        echo "üìÇ Todos los reportes est√°n en: $REPORT_DIR"
