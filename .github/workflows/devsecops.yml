name: DevSecOps Pipeline (Self-hosted)

on:
  push:
    branches: [ main ]

jobs:
  devsecops:
    runs-on: self-hosted

    steps:
    - name: Clonar repositorio
      uses: actions/checkout@v3

    - name: Detectar lenguaje autom√°ticamente
      run: |
        if [ -f "package.json" ]; then
          echo "Lenguaje detectado: Node.js"
          echo "APP_LANG=nodejs" >> $GITHUB_ENV
        elif [ -f "requirements.txt" ]; then
          echo "Lenguaje detectado: Python"
          echo "APP_LANG=python" >> $GITHUB_ENV
        elif [ -f "pom.xml" ]; then
          echo "Lenguaje detectado: Java (Maven)"
          echo "APP_LANG=java" >> $GITHUB_ENV
        else
          echo "No se detect√≥ lenguaje autom√°ticamente."
          exit 1
        fi

    - name: Instalar dependencias solo si no est√°n
      run: |
        sudo apt update
        command -v jq >/dev/null 2>&1 || sudo apt install -y jq
        command -v wget >/dev/null 2>&1 || sudo apt install -y wget
        command -v curl >/dev/null 2>&1 || sudo apt install -y curl
        if [ "$APP_LANG" = "python" ]; then
          command -v pip3 >/dev/null 2>&1 || sudo apt install -y python3-pip python3-venv
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        elif [ "$APP_LANG" = "nodejs" ]; then
          command -v npm >/dev/null 2>&1 || sudo apt install -y nodejs npm
          npm install
        elif [ "$APP_LANG" = "java" ]; then
          command -v mvn >/dev/null 2>&1 || sudo apt install -y maven default-jdk
          mvn clean install
        fi

    - name: Inicializar CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ env.APP_LANG }}

    - name: Analizar con CodeQL
      uses: github/codeql-action/analyze@v3

    - name: Instalar Trivy
      run: |
        if ! command -v trivy >/dev/null 2>&1; then
          sudo apt install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt update
          sudo apt install -y trivy
        fi

    - name: Ejecutar Trivy (SBOM + SCA)
      run: |
        trivy fs . --exit-code 0 --severity HIGH,CRITICAL

    - name: Descargar OWASP ZAP (√∫ltima versi√≥n semanal)
      run: |
        echo "üîç Buscando √∫ltima versi√≥n de ZAP..."
        ZAP_URL=$(curl -s https://api.github.com/repos/zaproxy/zaproxy/releases | jq -r '.[].assets[] | select(.name | test("ZAP_.*\\.jar$")) | .browser_download_url' | head -n 1)

        if [ -z "$ZAP_URL" ]; then
          echo "‚ùå No se encontr√≥ la URL de ZAP."
          exit 1
        fi

        echo "‚¨áÔ∏è Descargando desde: $ZAP_URL"
        wget -O zap.jar "$ZAP_URL"

    - name: Ejecutar la aplicaci√≥n para escaneo DAST
      run: |
        if [ "$APP_LANG" = "python" ]; then
          source venv/bin/activate
          nohup python3 app.py &
        elif [ "$APP_LANG" = "nodejs" ]; then
          nohup npm start &
        elif [ "$APP_LANG" = "java" ]; then
          nohup java -jar target/*.jar &
        fi
        sleep 10

    - name: Escaneo DAST con ZAP
      run: |
        java -jar zap.jar -cmd -quickurl http://localhost:5000 -quickout reporte/zap_report.html || true

    - name: Subir reporte ZAP si existe
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: reporte-zap
        path: reporte/
